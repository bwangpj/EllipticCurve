/-
Copyright (c) 2025 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kenny Lau
-/

-- import Mathlib.Algebra.Category.Ring.Under.Basic
import Mathlib.AlgebraicGeometry.Cover.Open
import Mathlib.AlgebraicGeometry.Sites.BigZariski
import Mathlib.CategoryTheory.Sites.DenseSubsite.InducedTopology
import Mathlib.RingTheory.Ideal.Pointwise

/-!
# The Big Zariski Site on Affine Schemes

In this file we define the Zariski topology on the category of affine schemes.
-/

universe u v

open CategoryTheory Functor Opposite Category Limits

set_option linter.unusedVariables false in
def Canon (R : Type u) (S : Type v) : Type v := S

namespace Canon

variable (R : Type u) (S : Type v)

def of (x : S) : Canon R S := x
def down (x : Canon R S) : S := x

instance [Semiring S] : Semiring (Canon R S) :=
  inferInstanceAs (Semiring S)

@[simps] def ringEquiv [Semiring S] : Canon R S ‚âÉ+* S where
  toFun := down R S
  invFun := of R S
  map_add' _ _ := rfl
  map_mul' _ _ := rfl
  left_inv _ := rfl
  right_inv _ := rfl

instance [CommSemiring S] : CommSemiring (Canon R S) :=
  inferInstanceAs (CommSemiring S)

instance [Ring S] : Ring (Canon R S) :=
  inferInstanceAs (Ring S)

instance [CommRing S] : CommRing (Canon R S) :=
  inferInstanceAs (CommRing S)

instance [Field S] : Field (Canon R S) :=
  inferInstanceAs (Field S)

def toCanon [CommSemiring R] [Semiring S] [Algebra R S] : R ‚Üí+* Canon R S :=
  _root_.algebraMap R S

instance [CommSemiring R] [Semiring S] [Algebra R S] :
    Algebra R (Canon R S) where
  algebraMap := toCanon R S
  smul r x := toCanon R S r * x
  commutes' r x := Algebra.commutes r (show S from x)
  smul_def' _ _ := rfl

example [CommSemiring R] [CommSemiring S] [Algebra R S] :
    (algebraMap R (Canon R S)).toAlgebra = inferInstanceAs (Algebra R (Canon R S)) :=
  rfl

def algEquiv [CommSemiring R] [CommSemiring S] [Algebra R S] :
    Canon R S ‚âÉ‚Çê[R] S :=
  AlgEquiv.ofRingEquiv (f := ringEquiv R S) fun _ ‚Ü¶ rfl

instance [CommSemiring R] [CommSemiring S] [Algebra R S] (M : Submonoid R) [IsLocalization M S] :
    IsLocalization M (Canon R S) :=
  IsLocalization.isLocalization_of_algEquiv M (algEquiv R S).symm

end Canon


open AlgebraicGeometry AffineScheme Scheme TensorProduct

namespace CommRingCat

/-- A scheme is covered by affines. -/
instance : IsCoverDense (equivCommRingCat.inverse ‚ãô forgetToScheme) Scheme.zariskiTopology.{u} where
  is_cover X := ‚ü®.ofArrows (Spec ‚àò X.affineOpenCover.obj) X.affineOpenCover.map,
    ‚ü®X.affineOpenCover.openCover, rfl‚ü©,
    fun _ u ‚ü®j‚ü© ‚Ü¶ ‚ü®‚ü®op (X.affineOpenCover.obj j), ùüô _, X.affineOpenCover.map j, by rw [id_comp]‚ü©‚ü©‚ü©

/-- The Zariski topology on the opposite category of commutative rings, constructed using the
induced topology from the Zariski topology on the category of schemes. -/
def zariskiTopology : GrothendieckTopology CommRingCat.{u}·µí·µñ :=
  inducedTopology (equivCommRingCat.inverse ‚ãô forgetToScheme) Scheme.zariskiTopology

structure StandardSystem (R : Type u) [CommRing R] : Type (u+1) where
  J : Type
  fintype : Fintype J := by infer_instance
  elem : J ‚Üí R
  span_eq_top : Ideal.span (Set.range elem) = ‚ä§
  loc : J ‚Üí Type u
  commRing : ‚àÄ j, CommRing (loc j) := by infer_instance
  algebra : ‚àÄ j, Algebra R (loc j) := by infer_instance
  away : ‚àÄ j, IsLocalization.Away (elem j) (loc j) := by infer_instance

namespace StandardSystem

attribute [simp] fintype span_eq_top
attribute [instance] fintype commRing algebra away

@[simp] abbrev obj {R : Type u} [CommRing R] (s : StandardSystem R) (j : s.J) : CommRingCat·µí·µñ :=
  op (of (s.loc j))

@[simp]
abbrev hom {R : Type u} [CommRing R] (s : StandardSystem R) (j : s.J) : s.obj j ‚ü∂ op (of R) :=
  op (ofHom (algebraMap R (s.loc j)))

/-- A standard cover of Spec R by Spec R_{f·µ¢} where {f·µ¢}·µ¢ is a finite set that generates the unit
ideal of R. -/
inductive cover {R : Type u} [CommRing R] (s : StandardSystem R) : Presieve (op (of R)) where
  | mk (j : s.J) : cover s (s.hom j)

abbrev ofIsIso {R S : CommRingCat.{u}·µí·µñ} (f : S ‚ü∂ R) [IsIso f] : StandardSystem ‚Üë(unop R) where
  J := Unit
  elem j := 1
  span_eq_top := by rw [Set.range_const, Ideal.span_singleton_one]
  loc j := ‚Üë(unop S)
  algebra j := f.unop.hom.toAlgebra
  away j := letI := f.unop.hom.toAlgebra; haveI := isIso_unop f;
    IsLocalization.away_of_isUnit_of_bijective _ isUnit_one
      (by convert (CategoryTheory.isIso_iff_bijective ((forget CommRingCat).map f.unop)).1 <|
        inferInstance)

-- MOVE
@[ext] lemma _root_.Presieve.ext {C : Type u} [Category C] {X : C} {p q : Presieve X}
    (h : ‚àÄ (Y : C) (u : Y ‚ü∂ X), p u ‚Üî q u) : p = q :=
  funext fun Y ‚Ü¶ funext fun f ‚Ü¶ propext <| h Y f

@[simp] lemma ofIsIso_cover {R S : CommRingCat.{u}·µí·µñ} (f : S ‚ü∂ R) [IsIso f] :
    (ofIsIso f).cover = Presieve.singleton f := by
  ext Y u; constructor
  ¬∑ rintro ‚ü®j‚ü©; exact ‚ü®‚ü©
  ¬∑ rintro ‚ü®‚ü©; exact ‚ü®()‚ü©

noncomputable abbrev baseChange {R S : Type u} [CommRing R] [CommRing S] (f : R ‚Üí+* S)
    (s : StandardSystem R)
    (loc' : s.J ‚Üí Type u) [‚àÄ j, CommRing (loc' j)] [‚àÄ j, Algebra S (loc' j)]
    [‚àÄ j : s.J, IsLocalization.Away (f (s.elem j)) (loc' j)] :
    StandardSystem S where
  J := s.J
  elem j := f (s.elem j)
  span_eq_top := by rw [Set.range_comp', ‚Üê Ideal.map_span, s.span_eq_top, Ideal.map_top]
  loc := loc'

inductive _root_.Presieve.pullbackArrows' {C : Type u} [Category C] {X Y : C} (f : Y ‚ü∂ X)
    (R : Presieve X) (cone : ‚àÄ Z, ‚àÄ (u : Z ‚ü∂ X), R u ‚Üí PullbackCone u f) : Presieve Y where
  | mk (Z : C) (u : Z ‚ü∂ X) (h : R u) : pullbackArrows' f R cone (cone Z u h).snd

noncomputable def _root_.CommRingCat.pullbackConeOp {X Y Z : CommRingCat.{u}·µí·µñ}
    (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : PullbackCone f g :=
  letI := f.unop.hom.toAlgebra
  letI := g.unop.hom.toAlgebra
  PullbackCone.mk (W := op (of (Canon X.unop (X.unop ‚äó[Z.unop] Y.unop))))
    (op (ofHom (algebraMap _ _)))
    (op (ofHom Algebra.TensorProduct.includeRight.toRingHom))
    congr(op (ofHom $Algebra.TensorProduct.includeLeftRingHom_comp_algebraMap))

instance (C : Type u) [Category.{v} C] : Trans (Iso (C := C)) Iso Iso where
  trans := Iso.trans

noncomputable def _root_.CommRingCat.pullbackConeOpIsoPullback {X Y Z : CommRingCat.{u}·µí·µñ}
    (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
    letI := f.unop.hom.toAlgebra
    letI := g.unop.hom.toAlgebra
    pullbackConeOp f g ‚âÖ (pushoutCocone Z.unop X.unop Y.unop).op :=
  PullbackCone.ext (Iso.op (RingEquiv.toCommRingCatIso (Canon.ringEquiv _ _).symm))

noncomputable def _root_.CommRingCat.pullbackConeOpIsLimit {X Y Z : CommRingCat.{u}·µí·µñ}
    (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : IsLimit (pullbackConeOp f g) :=
  letI := f.unop.hom.toAlgebra
  letI := g.unop.hom.toAlgebra
  have := IsColimit.coconePointUniqueUpToIso (pushout.isColimit _ _)
      (pushoutCoconeIsColimit Z.unop X.unop Y.unop)
  .ofIsoLimit (PushoutCocone.isColimitEquivIsLimitOp _ <| pushoutCoconeIsColimit _ _ _)
    (pullbackConeOpIsoPullback f g).symm

noncomputable def _root_.CommRingCat.pullbackConeOpIso {X Y Z : CommRingCat.{u}·µí·µñ}
    (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : (pullbackConeOp f g).pt ‚âÖ pullback f g :=
  (pullbackConeOpIsLimit f g).conePointUniqueUpToIso (limit.isLimit _)

@[simp] lemma baseChange_cover {R S : Type u} [CommRing R] [CommRing S] (f : R ‚Üí+* S)
    (s : StandardSystem R) :
    letI := f.toAlgebra;
    (s.baseChange (algebraMap R S) fun j ‚Ü¶ Canon S (S ‚äó[R] Canon R (s.loc j))).cover =
      Presieve.pullbackArrows' (op (ofHom f)) s.cover fun _ u _ ‚Ü¶
        (pullbackConeOp (op (ofHom f)) u).flip := by
  letI := f.toAlgebra
  have : f = algebraMap R S := rfl; rw [this]
  ext Y u; constructor
  ¬∑ rintro ‚ü®j‚ü©; exact ‚ü®s.obj j, s.hom j, ‚ü®_‚ü©‚ü©
  ¬∑ rintro ‚ü®_, _, ‚ü®j‚ü©‚ü©; exact ‚ü®_‚ü©


section Bind

variable {R : Type u} [CommRing R] (s : StandardSystem R)
  (t : (j : s.J) ‚Üí StandardSystem (s.loc j))
  (j : s.J) (tj : StandardSystem (s.loc j)) (k : tj.J)

noncomputable def bindElem : R :=
  (IsLocalization.Away.sec (s.elem j) (tj.elem k)).1

lemma associated_bindElem :
    Associated (algebraMap R (s.loc j) (bindElem s j tj k)) (tj.elem k) := by
  unfold bindElem
  rw [‚Üê IsLocalization.Away.sec_spec, map_pow]
  exact associated_mul_unit_left _ _ (.pow _ <| IsLocalization.Away.algebraMap_isUnit _)

instance : IsLocalization.Away (algebraMap R (s.loc j) (bindElem s j tj k)) (tj.loc k) :=
  IsLocalization.Away.of_associated (associated_bindElem s j tj k).symm

theorem span_map_bindElem_eq_top :
    Ideal.span (Set.range (algebraMap R (s.loc j) ‚àò bindElem s j tj)) = ‚ä§ := by
  rw [eq_top_iff, ‚Üê tj.span_eq_top, Ideal.span_le, Set.range_subset_iff]
  exact fun k ‚Ü¶ let ‚ü®u, hu‚ü© := associated_bindElem s j tj k
    hu ‚ñ∏ Ideal.mul_mem_right _ _ (Ideal.subset_span <| Set.mem_range_self _)

theorem exists_pow_mem_span_bindElem :
    ‚àÉ n : ‚Ñï, s.elem j ^ n ‚àà Ideal.span (Set.range (bindElem s j tj)) := by
  have := span_map_bindElem_eq_top s j tj
  rw [Ideal.eq_top_iff_one, Set.range_comp, ‚Üê Ideal.map_span, ‚Üê map_one (algebraMap R (s.loc j)),
    IsLocalization.algebraMap_mem_map_algebraMap_iff (Submonoid.powers (s.elem j))] at this
  obtain ‚ü®_, ‚ü®n, rfl‚ü©, hn‚ü© := this
  exact ‚ü®n, by simpa using hn‚ü©

theorem exists_pow_mem_span_mul_bindElem :
    ‚àÉ n : ‚Ñï, s.elem j ^ n ‚àà Ideal.span (Set.range fun k : tj.J ‚Ü¶ s.elem j * bindElem s j tj k) := by
  obtain ‚ü®n, hn‚ü© := exists_pow_mem_span_bindElem s j tj
  refine ‚ü®n + 1, ?_‚ü©
  rw [pow_succ']
  convert Ideal.mul_mem_mul (Ideal.mem_span_singleton_self _) hn
  rw [Ideal.span_mul_span', Set.singleton_mul, ‚Üê Set.range_comp]
  rfl

theorem span_bindElem_eq_top :
    Ideal.span (Set.range fun jk : (j : s.J) √ó (t j).J ‚Ü¶
      s.elem jk.fst * s.bindElem jk.fst (t jk.fst) jk.snd) = ‚ä§ := by
  have (j : s.J) := exists_pow_mem_span_mul_bindElem s j (t j)
  choose n hn using this
  rw [eq_top_iff, ‚Üê Ideal.span_pow_eq_top _ s.span_eq_top (‚àë j : s.J, n j), Ideal.span_le,
    ‚Üê Set.range_comp, Set.range_subset_iff]
  refine fun j ‚Ü¶ Ideal.mem_of_dvd _ ?_ (Ideal.span_mono ?_ (hn j))
  ¬∑ exact pow_dvd_pow _ (Finset.single_le_sum (fun _ _ ‚Ü¶ Nat.zero_le _) (Finset.mem_univ _))
  ¬∑ exact Set.range_subset_iff.2 fun k ‚Ü¶ ‚ü®‚ü®j, k‚ü©, rfl‚ü©

noncomputable abbrev bind [‚àÄ j k, Algebra R ((t j).loc k)]
    [‚àÄ j k, IsScalarTower R (s.loc j) ((t j).loc k)] :
    StandardSystem R where
  J := (j : s.J) √ó (t j).J
  elem j := s.elem j.fst * s.bindElem j.fst (t j.fst) j.snd
  span_eq_top := span_bindElem_eq_top s t
  loc j := ((t j.fst).loc j.snd)
  away j := IsLocalization.Away.mul' (s.loc j.fst) _ _ _

theorem bind_cover (t'' : ‚àÄ (Y : CommRingCat·µí·µñ) (u : Y ‚ü∂ op (of R)), s.cover u ‚Üí
      StandardSystem (Y.unop))
    (ht : ‚àÄ j, t'' (s.obj j) (s.hom j) (cover.mk j) = t j)
    [‚àÄ j k, Algebra R ((t j).loc k)]
    [‚àÄ j k, IsScalarTower R (s.loc j) ((t j).loc k)] :
    (s.bind t).cover = s.cover.bind fun Y u hu ‚Ü¶ (t'' Y u hu).cover := by
  ext Y u; constructor
  ¬∑ rintro ‚ü®‚ü®j, k‚ü©‚ü©
    refine ‚ü®_, (t j).hom k, s.hom j, cover.mk j, ?_, ?_‚ü©
    ¬∑ simp only [ht]; exact ‚ü®k‚ü©
    ¬∑ have := IsScalarTower.algebraMap_eq R (s.loc j) ((t j).loc k)
      exact congr(op (ofHom $this.symm))
  ¬∑ rintro ‚ü®Z, v, _, ‚ü®j‚ü©, ‚ü®k‚ü©, rfl‚ü©
    revert k
    rw [ht]
    intro k
    convert cover.mk (s := s.bind t) ‚ü®j, k‚ü©
    have := IsScalarTower.algebraMap_eq R (s.loc j) ((t j).loc k)
    exact congr(op (ofHom $this.symm))

end Bind

end StandardSystem

open StandardSystem

def standardPretopology : Pretopology CommRingCat.{u}·µí·µñ where
  coverings R := { u : Presieve R | ‚àÉ (s : StandardSystem ‚Üë(unop R)), s.cover = u }
  has_isos R S f _ := ‚ü®ofIsIso f, ofIsIso_cover f‚ü©
  pullbacks R S u := by
    rintro _ ‚ü®s, rfl‚ü©
    letI := u.unop.hom.toAlgebra
    let e (j : s.J) : pullback (s.hom j) u ‚âÖ
        op (of (Canon S.unop (S.unop ‚äó[R.unop] Canon R.unop (s.loc j)))) :=
      (pullbackSymmetry _ _).trans (pullbackConeOpIso u (s.hom j)).symm
    letI (j : s.J) := (pullback.snd (s.hom j) u).unop.hom.toAlgebra
    letI (j : s.J) := (e j).hom.unop.hom.toAlgebra
    have h (j : s.J) : (e j).hom ‚â´ (pullbackConeOp u (s.hom j)).fst = pullback.snd (s.hom j) u := by
      unfold e pullbackConeOpIso
      rw [Iso.trans_hom, assoc, Iso.symm_hom, IsLimit.conePointUniqueUpToIso_inv_comp,
        pullbackSymmetry, IsLimit.conePointUniqueUpToIso_hom_comp]
      rfl
    haveI (j : s.J) : IsScalarTower (S.unop)
        (Canon S.unop (S.unop ‚äó[R.unop] Canon R.unop (s.loc j)))
        (pullback (s.hom j) u).unop :=
      .of_algebraMap_eq' congr((unop $((h j).symm)).hom)
    let t := (s.baseChange (algebraMap R.unop S.unop) fun j : s.J ‚Ü¶
      Canon S.unop (S.unop ‚äó[R.unop] Canon R.unop (s.loc j))).bind fun j : s.J ‚Ü¶
        ofIsIso (e j).hom
    use t; ext Y v; constructor
    ¬∑ rintro ‚ü®j, ‚ü®‚ü©‚ü©
      exact ‚ü®s.obj j, s.hom j, ‚ü®_‚ü©‚ü©
    ¬∑ rintro ‚ü®_, _, ‚ü®j‚ü©‚ü©
      exact cover.mk (s := t) ‚ü®j, Unit.unit‚ü©
  transitive := by
    rintro R _ t'' ‚ü®s, rfl‚ü© ht'
    choose t' ht using ht'
    let t (j : s.J) : StandardSystem (s.loc j) := t' (s.hom j) (cover.mk j)
    letI (j : s.J) (k : (t j).J) : Algebra (unop R).1 ((t j).loc k) :=
      Algebra.compHom _ (algebraMap (unop R).1 (s.loc j))
    have (j : s.J) (k : (t j).J) : IsScalarTower (‚Üë(unop R)) (s.loc j) ((t j).loc k) :=
      .of_algebraMap_eq fun r ‚Ü¶ rfl
    use s.bind t
    convert s.bind_cover t t' (fun j ‚Ü¶ rfl); exact (ht _ _).symm

end CommRingCat
