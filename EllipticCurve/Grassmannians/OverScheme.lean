/-
Copyright (c) 2025 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kenny Lau
-/

import EllipticCurve.Grassmannians.BigAffineZariski
import EllipticCurve.Grassmannians.PresheafCostructured

/-!
# The Category of Commutative Rings Over a Scheme

Fix a scheme `X`. We define the category of commutative rings `R` equipped with a morphism
`Spec R ‚ü∂ X`.

We define a Grothendieck topology on `OverScheme X` and show that sheaves on `OverScheme X` extend
to sheaves on `CommRingCat·µí·µñ`.
-/

universe v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ

open CategoryTheory AlgebraicGeometry Opposite Limits Category

-- MOVE

namespace CategoryTheory.Functor

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (G : C ‚•§ D)
  (K : GrothendieckTopology D)

class IsLocallyFullEvil (G : C ‚•§ D) : Prop where
  full (G) {X : D} {Y : C} (f : X ‚ü∂ G.obj Y) :
    ‚àÉ (X' : C) (g : X' ‚ü∂ Y) (e : X = G.obj X'), eqToHom e ‚â´ G.map g = f

class IsLocallyFaithfulEvil (G : C ‚•§ D) : Prop where
  faithful (G) {X X' Y : C} {f : X ‚ü∂ Y} {g : X' ‚ü∂ Y} (e : G.obj X = G.obj X')
    (e‚ÇÇ : G.map f = eqToHom e ‚â´ G.map g) : ‚àÉ h : X = X', f = eqToHom h ‚â´ g

variable [G.IsLocallyFullEvil] [G.IsLocallyFaithfulEvil]

def inducedTopologyEvil : GrothendieckTopology C where
  sieves _ S := K _ (S.functorPushforward G)
  top_mem' X := by
    change K _ _
    rw [Sieve.functorPushforward_top]
    exact K.top_mem _
  pullback_stable' X Y S iYX hS := by
    refine K.superset_covering ?_ (K.pullback_stable (G.map iYX) hS)
    rintro Z f ‚ü®W, iWX, iZW, hS, e‚ü©
    obtain ‚ü®Z, f, rfl, rfl‚ü© := IsLocallyFullEvil.full G f
    obtain ‚ü®U, g, e, rfl‚ü© := IsLocallyFullEvil.full G iZW
    rw [eqToHom_refl, id_comp] at e ‚ä¢
    rw [assoc, ‚Üê map_comp, ‚Üê map_comp] at e
    obtain ‚ü®rfl, e‚ü© := IsLocallyFaithfulEvil.faithful G _ e
    refine ‚ü®_, f, ùüô _, ?_, (id_comp _).symm‚ü©
    rw [eqToHom_refl, id_comp] at e
    exact congr(S.arrows $e).to_iff.mpr (S.downward_closed hS g)
  transitive' X S hS S' H' := by
    apply K.transitive hS
    rintro Y _ ‚ü®Z, g, i, hg, rfl‚ü©
    rw [Sieve.pullback_comp]
    apply K.pullback_stable i
    refine K.superset_covering ?_ (H' hg)
    rintro W _ ‚ü®Z', g', i', hg, rfl‚ü©
    refine ‚ü®Z', g' ‚â´ g , i', hg, ?_‚ü©
    simp

#print CommRingCat.sheafEquiv
#synth Scheme.Spec.IsCoverDense Scheme.zariskiTopology
#print IsCoverDense


end CategoryTheory.Functor

-- MOVE
namespace CategoryTheory.CostructuredArrow

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (S : C ‚•§ D) (T : D)
  (K : GrothendieckTopology C)

open GrothendieckTopology

instance : (proj S T).IsLocallyFullEvil where
  full {X Y} f := ‚ü®mk (S.map f ‚â´ Y.hom), homMk f, rfl, id_comp _‚ü©

instance : (proj S T).IsLocallyFaithfulEvil where
  faithful {X X' Y} f g e‚ÇÅ e‚ÇÇ := by
    obtain ‚ü®X, x, rfl‚ü© := mk_surjective X
    obtain ‚ü®X', x', rfl‚ü© := mk_surjective X'
    obtain ‚ü®Y, y, rfl‚ü© := mk_surjective Y
    change X = X' at e‚ÇÅ; subst e‚ÇÅ
    rw [eqToHom_refl, id_comp] at e‚ÇÇ
    change f.left = g.left at e‚ÇÇ
    have wf : S.map f.left ‚â´ y = x := w f
    have wg : S.map g.left ‚â´ y = x' := w g
    rw [e‚ÇÇ] at wf
    have : x = x' := wf.symm.trans wg; subst this
    refine ‚ü®rfl, ?_‚ü©
    rw [eqToHom_refl, id_comp]
    exact (proj S T).map_injective e‚ÇÇ

variable {S T} in
def inducedTopology : GrothendieckTopology (CostructuredArrow S T) :=
  (proj S T).inducedTopologyEvil K

end CategoryTheory.CostructuredArrow

namespace CommRingCat

abbrev OverScheme (ùíÆ : Scheme.{u}) : Type (u + 1) :=
  CostructuredArrow Scheme.Spec ùíÆ

namespace OverScheme

variable (ùíÆ : Scheme.{u})

@[simps!] noncomputable abbrev forget : OverScheme ùíÆ ‚•§ CommRingCat.{u}·µí·µñ :=
  CostructuredArrow.proj Scheme.Spec ùíÆ

@[simps!] noncomputable nonrec
def zariskiTopology : GrothendieckTopology (OverScheme ùíÆ) :=
  CostructuredArrow.inducedTopology zariskiTopology

end OverScheme

end CommRingCat
