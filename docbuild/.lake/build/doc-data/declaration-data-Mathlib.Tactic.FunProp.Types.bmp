{"name":"Mathlib.Tactic.FunProp.Types","instances":[{"typeNames":["Mathlib.Meta.FunProp.Origin"],"name":"Mathlib.Meta.FunProp.instInhabitedOrigin","className":"Inhabited"},{"typeNames":["Mathlib.Meta.FunProp.Origin"],"name":"Mathlib.Meta.FunProp.instBEqOrigin","className":"BEq"},{"typeNames":["Mathlib.Meta.FunProp.Config"],"name":"Mathlib.Meta.FunProp.instInhabitedConfig","className":"Inhabited"},{"typeNames":["Mathlib.Meta.FunProp.Config"],"name":"Mathlib.Meta.FunProp.instBEqConfig","className":"BEq"},{"typeNames":["Mathlib.Meta.FunProp.GeneralTheorem"],"name":"Mathlib.Meta.FunProp.instInhabitedGeneralTheorem","className":"Inhabited"},{"typeNames":["Mathlib.Meta.FunProp.GeneralTheorems"],"name":"Mathlib.Meta.FunProp.instInhabitedGeneralTheorems","className":"Inhabited"}],"imports":["Init","Mathlib.Tactic.FunProp.FunctionData","Mathlib.Lean.Meta.RefinedDiscrTree.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L175-L190","name":"Mathlib.Meta.FunProp.logError","line":175,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.logError","doc":"Log error message that will displayed to the user at the end.\n\nMessages are logged only when `transitionDepth = 0` i.e. when `fun_prop` is **not** trying to infer\nfunction property like continuity from another property like differentiability.\nThe main reason is that if the user forgets to add a continuity theorem for function `foo` then\n`fun_prop` should report that there is a continuity theorem for `foo` missing. If we would log\nmessages `transitionDepth > 0` then user will see messages saying that there is a missing theorem\nfor differentiability, smoothness, ... for `foo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.logError\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">logError</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">FunPropM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L162-L173","name":"Mathlib.Meta.FunProp.withIncreasedTransitionDepth","line":162,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.withIncreasedTransitionDepth","doc":"Increase transition depth. Return `none` if maximum transition depth has been reached. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.withIncreasedTransitionDepth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">withIncreasedTransitionDepth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">go</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L154-L160","name":"Mathlib.Meta.FunProp.increaseSteps","line":154,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.increaseSteps","doc":"Increase heartbeat, throws error when `maxSteps` was reached "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.increaseSteps\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">increaseSteps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">FunPropM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L149-L152","name":"Mathlib.Meta.FunProp.unfoldNamePred","line":149,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.unfoldNamePred","doc":"Get predicate on names indicating if theys shoulds be unfolded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.unfoldNamePred\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">unfoldNamePred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L145-L147","name":"Mathlib.Meta.FunProp.defaultUnfoldPred","line":145,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.defaultUnfoldPred","doc":"Default names to unfold "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.defaultUnfoldPred\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">defaultUnfoldPred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L143-L143","name":"Mathlib.Meta.FunProp.Result.proof","line":143,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result.proof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result.proof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Result</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L141-L141","name":"Mathlib.Meta.FunProp.Result.mk","line":141,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Result</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L140-L143","name":"Mathlib.Meta.FunProp.Result","line":140,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result","doc":"Result of `funProp`, it is a proof of function property `P f` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L136-L137","name":"Mathlib.Meta.FunProp.FunPropM","line":136,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM","doc":"Monad to run `fun_prop` tactic in. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunPropM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L132-L134","name":"Mathlib.Meta.FunProp.Context.increaseTransitionDepth","line":132,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.increaseTransitionDepth","doc":"Increase depth "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.increaseTransitionDepth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Context</span>.<span class=\"name\">increaseTransitionDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L130-L130","name":"Mathlib.Meta.FunProp.State.transitionTheorems","line":130,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.transitionTheorems","doc":"`RefinedDiscrTree` is lazy, so we store the partially evaluated tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.transitionTheorems\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span>.<span class=\"name\">transitionTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems\">GeneralTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L128-L128","name":"Mathlib.Meta.FunProp.State.morTheorems","line":128,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.morTheorems","doc":"`RefinedDiscrTree` is lazy, so we store the partially evaluated tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.morTheorems\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span>.<span class=\"name\">morTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems\">GeneralTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L126-L126","name":"Mathlib.Meta.FunProp.State.msgLog","line":126,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.msgLog","doc":"Log progress and failures messages that should be displayed to the user at the end. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.msgLog\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span>.<span class=\"name\">msgLog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L124-L124","name":"Mathlib.Meta.FunProp.State.numSteps","line":124,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.numSteps","doc":"Count the number of steps and stop when maxSteps is reached. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.numSteps\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span>.<span class=\"name\">numSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L122-L122","name":"Mathlib.Meta.FunProp.State.failureCache","line":122,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.failureCache","doc":"Cache storing failed goals such that they are not tried again. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.failureCache\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span>.<span class=\"name\">failureCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.ExprSet\">Lean.ExprSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L120-L120","name":"Mathlib.Meta.FunProp.State.cache","line":120,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.cache","doc":"Simp's cache is used as the `fun_prop` tactic is designed to be used inside of simp and\nutilize its cache. It holds successful goals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.cache\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Cache\">Lean.Meta.Simp.Cache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L117-L117","name":"Mathlib.Meta.FunProp.State.mk","line":117,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Cache\">Lean.Meta.Simp.Cache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">failureCache</span> : <a href=\"./Lean/Expr.html#Lean.ExprSet\">Lean.ExprSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numSteps</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgLog</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">morTheorems </span><span class=\"fn\">transitionTheorems</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems\">GeneralTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L116-L130","name":"Mathlib.Meta.FunProp.State","line":116,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State","doc":"`fun_prop` state "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L114-L114","name":"Mathlib.Meta.FunProp.instInhabitedGeneralTheorems","line":114,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedGeneralTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedGeneralTheorems\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instInhabitedGeneralTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems\">GeneralTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L113-L113","name":"Mathlib.Meta.FunProp.GeneralTheorems.theorems","line":113,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems.theorems","doc":"Discrimination tree indexing theorems. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems.theorems\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">GeneralTheorems</span>.<span class=\"name\">theorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems\">GeneralTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">Lean.Meta.RefinedDiscrTree</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem\">GeneralTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L111-L111","name":"Mathlib.Meta.FunProp.GeneralTheorems.mk","line":111,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">GeneralTheorems</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">theorems</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">Lean.Meta.RefinedDiscrTree</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem\">GeneralTheorem</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems\">GeneralTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L110-L114","name":"Mathlib.Meta.FunProp.GeneralTheorems","line":110,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems","doc":"Structure holding transition or morphism theorems for `fun_prop` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorems\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">GeneralTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L108-L108","name":"Mathlib.Meta.FunProp.instInhabitedGeneralTheorem","line":108,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedGeneralTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedGeneralTheorem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instInhabitedGeneralTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem\">GeneralTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L107-L107","name":"Mathlib.Meta.FunProp.GeneralTheorem.priority","line":107,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem.priority","doc":"priority "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem.priority\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">GeneralTheorem</span>.<span class=\"name\">priority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem\">GeneralTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L105-L105","name":"Mathlib.Meta.FunProp.GeneralTheorem.keys","line":105,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem.keys","doc":"discrimination tree keys used to index this theorem "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem.keys\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">GeneralTheorem</span>.<span class=\"name\">keys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem\">GeneralTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Lean.Meta.RefinedDiscrTree.Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">Lean.Meta.RefinedDiscrTree.LazyEntry</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L103-L103","name":"Mathlib.Meta.FunProp.GeneralTheorem.thmName","line":103,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem.thmName","doc":"theorem name "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem.thmName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">GeneralTheorem</span>.<span class=\"name\">thmName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem\">GeneralTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L101-L101","name":"Mathlib.Meta.FunProp.GeneralTheorem.funPropName","line":101,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem.funPropName","doc":"function property name "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem.funPropName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">GeneralTheorem</span>.<span class=\"name\">funPropName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem\">GeneralTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L99-L99","name":"Mathlib.Meta.FunProp.GeneralTheorem.mk","line":99,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">GeneralTheorem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funPropName </span><span class=\"fn\">thmName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">keys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Lean.Meta.RefinedDiscrTree.Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">Lean.Meta.RefinedDiscrTree.LazyEntry</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">priority</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem\">GeneralTheorem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L98-L108","name":"Mathlib.Meta.FunProp.GeneralTheorem","line":98,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem","doc":"General theorem about a function property used for transition and morphism theorems "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.GeneralTheorem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">GeneralTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L96-L96","name":"Mathlib.Meta.FunProp.Context.transitionDepth","line":96,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.transitionDepth","doc":"current transition depth "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.transitionDepth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Context</span>.<span class=\"name\">transitionDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L94-L94","name":"Mathlib.Meta.FunProp.Context.disch","line":94,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.disch","doc":"Custom discharger to satisfy theorem hypotheses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.disch\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Context</span>.<span class=\"name\">disch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L91-L91","name":"Mathlib.Meta.FunProp.Context.constToUnfold","line":91,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.constToUnfold","doc":"Name to unfold "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.constToUnfold\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Context</span>.<span class=\"name\">constToUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">Std.TreeSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L89-L89","name":"Mathlib.Meta.FunProp.Context.config","line":89,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.config","doc":"fun_prop config "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Context</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L87-L87","name":"Mathlib.Meta.FunProp.Context.mk","line":87,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constToUnfold</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeSet/Basic.html#Std.TreeSet\">Std.TreeSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">disch</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transitionDepth</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L86-L96","name":"Mathlib.Meta.FunProp.Context","line":86,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context","doc":"`fun_prop` context "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Context\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L84-L84","name":"Mathlib.Meta.FunProp.instBEqConfig","line":84,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instBEqConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instBEqConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instBEqConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L84-L84","name":"Mathlib.Meta.FunProp.instInhabitedConfig","line":84,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L83-L83","name":"Mathlib.Meta.FunProp.Config.maxSteps","line":83,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.maxSteps","doc":"Maximum number of steps `fun_prop` can take. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.maxSteps\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L81-L81","name":"Mathlib.Meta.FunProp.Config.maxTransitionDepth","line":81,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.maxTransitionDepth","doc":"Maximum number of transitions between function properties. For example inferring continuity\nfrom differentiability and then differentiability from smoothness (`ContDiff ℝ ∞`) requires\n`maxTransitionDepth = 2`. The default value of one expects that transition theorems are\ntransitively closed e.g. there is a transition theorem that infers continuity directly from\nsmoothenss.\n\nSetting `maxTransitionDepth` to zero will disable all transition theorems. This can be very\nuseful when `fun_prop` should fail quickly. For example when using `fun_prop` as discharger in\n`simp`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.maxTransitionDepth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxTransitionDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L70-L70","name":"Mathlib.Meta.FunProp.Config.mk","line":70,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxTransitionDepth </span><span class=\"fn\">maxSteps</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L69-L84","name":"Mathlib.Meta.FunProp.Config","line":69,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config","doc":"`fun_prop` configuration "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L65-L67","name":"Mathlib.Meta.FunProp.defaultNamesToUnfold","line":65,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.defaultNamesToUnfold","doc":"Default names to be considered reducible by `fun_prop` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.defaultNamesToUnfold\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">defaultNamesToUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L58-L63","name":"Mathlib.Meta.FunProp.FunctionData.getFnOrigin","line":58,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunctionData.getFnOrigin","doc":"Get origin of the head function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunctionData.getFnOrigin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">getFnOrigin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fData</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L52-L56","name":"Mathlib.Meta.FunProp.ppOrigin'","line":52,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.ppOrigin'","doc":"Pretty print `FunProp.Origin`. Returns string unlike `ppOrigin`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.ppOrigin'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">ppOrigin'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origin</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L47-L50","name":"Mathlib.Meta.FunProp.ppOrigin","line":47,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.ppOrigin","doc":"Pretty print `FunProp.Origin`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.ppOrigin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">ppOrigin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Origin</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L41-L45","name":"Mathlib.Meta.FunProp.Origin.getValue","line":41,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.getValue","doc":"Get the expression specified by `origin`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.getValue\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Origin</span>.<span class=\"name\">getValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origin</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L35-L39","name":"Mathlib.Meta.FunProp.Origin.name","line":35,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.name","doc":"Name of the origin. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.name\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Origin</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origin</span> : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L33-L33","name":"Mathlib.Meta.FunProp.instBEqOrigin","line":33,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instBEqOrigin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instBEqOrigin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instBEqOrigin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L33-L33","name":"Mathlib.Meta.FunProp.instInhabitedOrigin","line":33,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedOrigin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedOrigin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instInhabitedOrigin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L31-L32","name":"Mathlib.Meta.FunProp.Origin.fvar","line":31,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.fvar","doc":"It is a free variable in the local context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.fvar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Origin</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L29-L30","name":"Mathlib.Meta.FunProp.Origin.decl","line":29,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.decl","doc":"It is a constant defined in the environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.decl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Origin</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Types.lean#L27-L33","name":"Mathlib.Meta.FunProp.Origin","line":27,"kind":"inductive","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin","doc":"Indicated origin of a function or a statement. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Origin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}