{"name":"Mathlib.Tactic.GRewrite.Elab","instances":[],"imports":["Init","Mathlib.Tactic.GRewrite.Core"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Elab.lean#L128-L129","name":"Mathlib.Tactic.tacticNth_grw_____","line":128,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticNth_grw_____","doc":"`nth_grw` is just like `nth_rw`, but for `grw`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticNth_grw_____\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticNth_grw_____</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Elab.lean#L124-L125","name":"Mathlib.Tactic.tacticNth_grewrite_____","line":124,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticNth_grewrite_____","doc":"`nth_grewrite` is just like `nth_rewrite`, but for `grewrite`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticNth_grewrite_____\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticNth_grewrite_____</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Elab.lean#L120-L121","name":"Mathlib.Tactic.applyRwSeq","line":120,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.applyRwSeq","doc":"`apply_rw [rules]` is a shorthand for `grw +implicationHyp [rules]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.applyRwSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">applyRwSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Elab.lean#L116-L117","name":"Mathlib.Tactic.tacticApply_rewrite___","line":116,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticApply_rewrite___","doc":"`apply_rewrite [rules]` is a shorthand for `grewrite +implicationHyp [rules]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticApply_rewrite___\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticApply_rewrite___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Elab.lean#L107-L112","name":"Mathlib.Tactic.rwSeq","line":107,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.rwSeq","doc":"`grw [e]` works just like `rw [e]`, but `e` can be a relation other than `=` or `↔`.\n\nFor example,\n```lean\nexample (h₁ : a < b) (h₂ : b ≤ c) : a + d ≤ c + d := by\n  grw [h₁, h₂]\n\nexample (h : a ≡ b [ZMOD n]) : a ^ 2 ≡ b ^ 2 [ZMOD n] := by\n  grw [h]\n\nexample : (h₁ : a ∣ b) (h₂ : c ∣ a * d) : a ∣ b * d := by\n  grw [h₁]\n  exact h₂\n\n```\nTo be able to use `grw`, the relevant lemmas need to be tagged with `@[gcongr]`.\nTo rewrite inside a transitive relation, you can also give it an `IsTrans` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.rwSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">rwSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Elab.lean#L79-L86","name":"Mathlib.Tactic.evalGRewriteSeq","line":79,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.evalGRewriteSeq","doc":"`grewrite [e]` works just like `rewrite [e]`, but `e` can be a relation other than `=` or `↔`.\n\nFor example,\n```lean\nexample (h₁ : a < b) (h₂ : b ≤ c) : a + d ≤ c + d := by\n  grewrite [h₁, h₂]; rfl\n\nexample (h : a ≡ b [ZMOD n]) : a ^ 2 ≡ b ^ 2 [ZMOD n] := by\n  grewrite [h]; rfl\n\nexample : (h₁ : a ∣ b) (h₂ : c ∣ a * d) : a ∣ b * d := by\n  grewrite [h₁]\n  exact h₂\n\n```\nTo be able to use `grewrite`, the relevant lemmas need to be tagged with `@[gcongr]`.\nTo rewrite inside a transitive relation, you can also give it an `IsTrans` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.evalGRewriteSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalGRewriteSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Elab.lean#L58-L77","name":"Mathlib.Tactic.grewriteSeq","line":58,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteSeq","doc":"`grewrite [e]` works just like `rewrite [e]`, but `e` can be a relation other than `=` or `↔`.\n\nFor example,\n```lean\nexample (h₁ : a < b) (h₂ : b ≤ c) : a + d ≤ c + d := by\n  grewrite [h₁, h₂]; rfl\n\nexample (h : a ≡ b [ZMOD n]) : a ^ 2 ≡ b ^ 2 [ZMOD n] := by\n  grewrite [h]; rfl\n\nexample : (h₁ : a ∣ b) (h₂ : c ∣ a * d) : a ∣ b * d := by\n  grewrite [h₁]\n  exact h₂\n\n```\nTo be able to use `grewrite`, the relevant lemmas need to be tagged with `@[gcongr]`.\nTo rewrite inside a transitive relation, you can also give it an `IsTrans` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grewriteSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Elab.lean#L55-L56","name":"Mathlib.Tactic.elabGRewriteConfig","line":55,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.elabGRewriteConfig","doc":"Function elaborating `GRewrite.Config`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.elabGRewriteConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabGRewriteConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\">GRewrite.Config</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Elab.lean#L39-L53","name":"Mathlib.Tactic.grewriteLocalDecl","line":39,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteLocalDecl","doc":"Apply the `grewrite` tactic to a local hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteLocalDecl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grewriteLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\">GRewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Elab.lean#L25-L37","name":"Mathlib.Tactic.grewriteTarget","line":25,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteTarget","doc":"Apply the `grewrite` tactic to the current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteTarget\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grewriteTarget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\">GRewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}