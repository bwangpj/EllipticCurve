{"name":"Mathlib.Tactic.FunProp.Mor","instances":[{"typeNames":["Mathlib.Meta.FunProp.Mor.Arg"],"name":"Mathlib.Meta.FunProp.Mor.instInhabitedArg","className":"Inhabited"}],"imports":["Init","Mathlib.Data.FunLike.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L152-L157","name":"Mathlib.Meta.FunProp.Mor.mkAppN","line":152,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.mkAppN","doc":"`mkAppN f #[a₀, ..., aₙ]` ==> `f a₀ a₁ .. aₙ` where `f` can be bundled morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.mkAppN\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">mkAppN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L149-L150","name":"Mathlib.Meta.FunProp.Mor.getAppArgs","line":149,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.getAppArgs","doc":"Given `f a₁ a₂ ... aₙ`, returns `#[a₁, ..., aₙ]` where `f` can be bundled morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.getAppArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">getAppArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Arg</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L133-L147","name":"Mathlib.Meta.FunProp.Mor.getAppFn","line":133,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.getAppFn","doc":"If the given expression is a sequence of morphism applications `f a₁ .. aₙ`, return `f`.\nOtherwise return the input expression.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.getAppFn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">getAppFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L113-L130","name":"Mathlib.Meta.FunProp.Mor.withApp.go","line":113,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.withApp.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.withApp.go\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">withApp</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L108-L130","name":"Mathlib.Meta.FunProp.Mor.withApp","line":108,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.withApp","doc":"Given `e = f a₁ a₂ ... aₙ`, returns `k f #[a₁, ..., aₙ]` where `f` can be bundled morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.withApp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">withApp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L101-L105","name":"Mathlib.Meta.FunProp.Mor.app","line":101,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.app","doc":"Morphism application "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.app\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L99-L99","name":"Mathlib.Meta.FunProp.Mor.instInhabitedArg","line":99,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.instInhabitedArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.instInhabitedArg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">instInhabitedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L98-L98","name":"Mathlib.Meta.FunProp.Mor.Arg.coe","line":98,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.coe","doc":"coercion `F → α → β` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.coe\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">Arg</span>.<span class=\"name\">coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L96-L96","name":"Mathlib.Meta.FunProp.Mor.Arg.expr","line":96,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.expr","doc":"argument of type `α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.expr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">Arg</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L94-L94","name":"Mathlib.Meta.FunProp.Mor.Arg.mk","line":94,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">Arg</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coe</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L93-L99","name":"Mathlib.Meta.FunProp.Mor.Arg","line":93,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg","doc":"Argument of morphism application that stores corresponding coercion if necessary "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">Arg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L84-L90","name":"Mathlib.Meta.FunProp.Mor.whnf","line":84,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.whnf","doc":"Weak normal head form of an expression involving morphism applications.\n\nFor example calling this on `coe (f a) b` will put `f` in weak normal head form instead of `coe`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.whnf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">whnf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L59-L82","name":"Mathlib.Meta.FunProp.Mor.whnfPred","line":59,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.whnfPred","doc":"Weak normal head form of an expression involving morphism applications. Additionally, `pred`\ncan specify which when to unfold definitions.\n\nFor example calling this on `coe (f a) b` will put `f` in weak normal head form instead of `coe`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.whnfPred\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">whnfPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L50-L57","name":"Mathlib.Meta.FunProp.Mor.isMorApp?","line":50,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isMorApp?","doc":"Is `e` morphism application? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isMorApp?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">isMorApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\">App</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L48-L48","name":"Mathlib.Meta.FunProp.Mor.App.arg","line":48,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.arg","doc":"morphism argument "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.arg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">App</span>.<span class=\"name\">arg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\">App</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L46-L46","name":"Mathlib.Meta.FunProp.Mor.App.fn","line":46,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.fn","doc":"bundled morphism "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.fn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">App</span>.<span class=\"name\">fn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\">App</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L44-L44","name":"Mathlib.Meta.FunProp.Mor.App.coe","line":44,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.coe","doc":"morphism coercion "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.coe\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">App</span>.<span class=\"name\">coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\">App</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L42-L42","name":"Mathlib.Meta.FunProp.Mor.App.mk","line":42,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">App</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coe </span><span class=\"fn\">fn </span><span class=\"fn\">arg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\">App</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L41-L48","name":"Mathlib.Meta.FunProp.Mor.App","line":41,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App","doc":"Morphism application "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">App</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L35-L39","name":"Mathlib.Meta.FunProp.Mor.isCoeFun","line":35,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isCoeFun","doc":"Is `e` a coerction from some function space to functions? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isCoeFun\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">isCoeFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/FunProp/Mor.lean#L30-L33","name":"Mathlib.Meta.FunProp.Mor.isCoeFunName","line":30,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isCoeFunName","doc":"Is `name` a coerction from some function space to functions? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isCoeFunName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">isCoeFunName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}