{"name":"Mathlib.Tactic.GCongr.Core","instances":[{"typeNames":["Mathlib.Tactic.GCongr.GCongrKey"],"name":"Mathlib.Tactic.GCongr.instInhabitedGCongrKey","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.GCongr.GCongrKey"],"name":"Mathlib.Tactic.GCongr.instBEqGCongrKey","className":"BEq"},{"typeNames":["Mathlib.Tactic.GCongr.GCongrKey"],"name":"Mathlib.Tactic.GCongr.instHashableGCongrKey","className":"Hashable"},{"typeNames":["Mathlib.Tactic.GCongr.GCongrLemma"],"name":"Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.GCongr.GCongrLemma"],"name":"Mathlib.Tactic.GCongr.instReprGCongrLemma","className":"Repr"}],"imports":["Init","Lean","Batteries.Lean.Except","Batteries.Tactic.Exact","Mathlib.Lean.Elab.Term","Mathlib.Tactic.GCongr.ForwardAttr","Mathlib.Order.Defs.Unbundled"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L614-L636","name":"Mathlib.Tactic.GCongr.«tacticRel[_]»","line":614,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.«tacticRel[_]»","doc":"The `rel` tactic applies \"generalized congruence\" rules to solve a relational goal by\n\"substitution\".  For example,\n```\nexample {a b x c d : ℝ} (h1 : a ≤ b) (h2 : c ≤ d) :\n    x ^ 2 * a + c ≤ x ^ 2 * b + d := by\n  rel [h1, h2]\n```\nIn this example we \"substitute\" the hypotheses `a ≤ b` and `c ≤ d` into the LHS `x ^ 2 * a + c` of\nthe goal and obtain the RHS `x ^ 2 * b + d`, thus proving the goal.\n\nThe \"generalized congruence\" rules used are the library lemmas which have been tagged with the\nattribute `@[gcongr]`.  For example, the first example constructs the proof term\n```\nadd_le_add (mul_le_mul_of_nonneg_left h1 (pow_bit0_nonneg x 1)) h2\n```\nusing the generalized congruence lemmas `add_le_add` and `mul_le_mul_of_nonneg_left`.  If there are\nno applicable generalized congruence lemmas, the tactic fails.\n\nThe tactic attempts to discharge side goals to these \"generalized congruence\" lemmas (such as the\nside goal `0 ≤ x ^ 2` in the above application of `mul_le_mul_of_nonneg_left`) using the tactic\n`gcongr_discharger`, which wraps `positivity` but can also be extended. If the side goals cannot\nbe discharged in this way, the tactic fails. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.«tacticRel[_]»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">«tacticRel[_]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L548-L612","name":"Mathlib.Tactic.GCongr.tacticGcongr__With___","line":548,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr__With___","doc":"The `gcongr` tactic applies \"generalized congruence\" rules, reducing a relational goal\nbetween a LHS and RHS matching the same pattern to relational subgoals between the differing\ninputs to the pattern.  For example,\n```\nexample {a b x c d : ℝ} (h1 : a + 1 ≤ b + 1) (h2 : c + 2 ≤ d + 2) :\n    x ^ 2 * a + c ≤ x ^ 2 * b + d := by\n  gcongr\n  · linarith\n  · linarith\n```\nThis example has the goal of proving the relation `≤` between a LHS and RHS both of the pattern\n```\nx ^ 2 * ?_ + ?_\n```\n(with inputs `a`, `c` on the left and `b`, `d` on the right); after the use of\n`gcongr`, we have the simpler goals `a ≤ b` and `c ≤ d`.\n\nA pattern can be provided explicitly; this is useful if a non-maximal match is desired:\n```\nexample {a b c d x : ℝ} (h : a + c + 1 ≤ b + d + 1) :\n    x ^ 2 * (a + c) + 5 ≤ x ^ 2 * (b + d) + 5 := by\n  gcongr x ^ 2 * ?_ + 5\n  linarith\n```\n\nThe \"generalized congruence\" rules used are the library lemmas which have been tagged with the\nattribute `@[gcongr]`.  For example, the first example constructs the proof term\n```\nadd_le_add (mul_le_mul_of_nonneg_left _ (pow_bit0_nonneg x 1)) _\n```\nusing the generalized congruence lemmas `add_le_add` and `mul_le_mul_of_nonneg_left`.\n\nThe tactic attempts to discharge side goals to these \"generalized congruence\" lemmas (such as the\nside goal `0 ≤ x ^ 2` in the above application of `mul_le_mul_of_nonneg_left`) using the tactic\n`gcongr_discharger`, which wraps `positivity` but can also be extended. Side goals not discharged\nin this way are left for the user.\n\n`gcongr` will descend into binders (for example sums or suprema). To name the bound variables,\nuse `with`:\n```\nexample {f g : ℕ → ℝ≥0∞} (h : ∀ n, f n ≤ g n) : ⨆ n, f n ≤ ⨆ n, g n := by\n  gcongr with i\n  exact h i\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr__With___\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">tacticGcongr__With___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L400-L546","name":"Lean.MVarId.gcongr","line":400,"kind":"opaque","docLink":"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongr","doc":"The core of the `gcongr` tactic.  Parse a goal into the form `(f _ ... _) ∼ (f _ ... _)`,\nlook up any relevant @[gcongr] lemmas, try to apply them, recursively run the tactic itself on\n\"main\" goals which are generated, and run the discharger on side goals which are generated. If there\nis a user-provided template, first check that the template asks us to descend this far into the\nmatch. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongr\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">gcongr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">template</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">names</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">grewriteHole</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainGoalDischarger</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span> := <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrForwardDischarger\">Mathlib.Tactic.GCongr.gcongrForwardDischarger</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sideGoalDischarger</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span> := <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrDischarger\">Mathlib.Tactic.GCongr.gcongrDischarger</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L375-L396","name":"Mathlib.Tactic.GCongr.getTransLemma?","line":375,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.getTransLemma?","doc":"`getTransLemma?` constructs a `GCongrLemma` for `gcongr` goals of the form `a ≺ b → c ≺ d`.\nThis will be tried if there is no other available `@[gcongr]` lemma.\nFor example, the relation `a ≡ b [ZMOD n]` has an instance of `IsTrans`, so a congruence of the form\n`a ≡ b [ZMOD n] → c ≡ d [ZMOD n]` can be solved with `rel_imp_rel`, `rel_trans` or `rel_trans'`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.getTransLemma?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">getTransLemma?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">key</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L373-L373","name":"Mathlib.Tactic.GCongr.rel_trans'","line":373,"kind":"theorem","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.rel_trans'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.rel_trans'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">rel_trans'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L372-L372","name":"Mathlib.Tactic.GCongr.rel_trans","line":372,"kind":"theorem","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.rel_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.rel_trans\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">rel_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L369-L370","name":"Mathlib.Tactic.GCongr.rel_imp_rel","line":369,"kind":"theorem","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.rel_imp_rel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.rel_imp_rel\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">rel_imp_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span> <span class=\"fn\">d</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L349-L358","name":"Mathlib.Tactic.GCongr.containsHole","line":349,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.containsHole","doc":"Determine whether `template` contains a `?_`.\nThis guides the `gcongr` tactic when it is given a template. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.containsHole\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">containsHole</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">template</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L335-L347","name":"Mathlib.Tactic.GCongr.gcongrForwardDischarger","line":335,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrForwardDischarger","doc":"This is used as the default main-goal discharger,\nconsisting of running `Lean.MVarId.gcongrForward` (trying a term together with limited\nforward-reasoning on that term) on each nontrivial hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrForwardDischarger\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">gcongrForwardDischarger</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L317-L333","name":"Lean.MVarId.gcongrForward","line":317,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongrForward","doc":"Attempt to resolve an (implicitly) relational goal by one of a provided list of hypotheses,\neither with such a hypothesis directly or by a limited palette of relational forward-reasoning from\nthese hypotheses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongrForward\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">gcongrForward</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L314-L315","name":"Mathlib.Tactic.GCongr.exact","line":314,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exact\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/ForwardAttr.html#Mathlib.Tactic.GCongr.ForwardExt\">ForwardExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L310-L312","name":"Mathlib.Tactic.GCongr.symmExact","line":310,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.symmExact","doc":"See if the term is `a ∼ b` with `∼` symmetric and the goal is `b ∼ a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.symmExact\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">symmExact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/ForwardAttr.html#Mathlib.Tactic.GCongr.ForwardExt\">ForwardExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L303-L308","name":"Mathlib.Tactic.GCongr.exactRefl","line":303,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exactRefl","doc":"See if the term is `a = b` and the goal is `a ∼ b` or `b ∼ a`, with `∼` reflexive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exactRefl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">exactRefl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/ForwardAttr.html#Mathlib.Tactic.GCongr.ForwardExt\">ForwardExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L291-L299","name":"Mathlib.Tactic.GCongr.gcongrDischarger","line":291,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrDischarger","doc":"This is used as the default side-goal discharger,\nit calls the `gcongr_discharger` extensible tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrDischarger\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">gcongrDischarger</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L289-L289","name":"Mathlib.Tactic.GCongr.tacticGcongr_discharger","line":289,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr_discharger","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr_discharger\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">tacticGcongr_discharger</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L182-L246","name":"Mathlib.Tactic.GCongr.makeGCongrLemma","line":182,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.makeGCongrLemma","doc":"Construct the `GCongrKey` and `GCongrLemma` data from a given lemma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.makeGCongrLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">makeGCongrLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declTy</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numHyps</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L171-L180","name":"Mathlib.Tactic.GCongr.getRel","line":171,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.getRel","doc":"If `e` is of the form `r a b`, return `(r, a, b)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.getRel\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">getRel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L159-L169","name":"Mathlib.Tactic.GCongr.getCongrAppFnArgs","line":159,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.getCongrAppFnArgs","doc":"Given an application `f a₁ .. aₙ`, return the name of `f`, and the array of arguments `aᵢ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.getCongrAppFnArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">getCongrAppFnArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L151-L157","name":"Mathlib.Tactic.GCongr.gcongrExt","line":151,"kind":"opaque","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrExt","doc":"Environment extension for \"generalized congruence\" (`gcongr`) lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrExt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">gcongrExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> (<a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>) <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L149-L149","name":"Mathlib.Tactic.GCongr.instReprGCongrLemma","line":149,"kind":"instance","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instReprGCongrLemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instReprGCongrLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instReprGCongrLemma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L149-L149","name":"Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","line":149,"kind":"instance","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instInhabitedGCongrLemma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L148-L148","name":"Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals","line":148,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals","doc":"`mainSubgoals` are the subgoals on which `gcongr` will be recursively called. They store\n- the index of the hypothesis\n- the index of the arguments in the conclusion\n- the number of parameters in the hypothesis "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">mainSubgoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L143-L143","name":"Mathlib.Tactic.GCongr.GCongrLemma.declName","line":143,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.declName","doc":"The name of the lemma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.declName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L141-L141","name":"Mathlib.Tactic.GCongr.GCongrLemma.mk","line":141,"kind":"ctor","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainSubgoals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L140-L149","name":"Mathlib.Tactic.GCongr.GCongrLemma","line":140,"kind":"structure","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma","doc":"Structure recording the data for a \"generalized congruence\" (`gcongr`) lemma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L138-L138","name":"Mathlib.Tactic.GCongr.instHashableGCongrKey","line":138,"kind":"instance","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instHashableGCongrKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instHashableGCongrKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instHashableGCongrKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L138-L138","name":"Mathlib.Tactic.GCongr.instBEqGCongrKey","line":138,"kind":"instance","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instBEqGCongrKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instBEqGCongrKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instBEqGCongrKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L138-L138","name":"Mathlib.Tactic.GCongr.instInhabitedGCongrKey","line":138,"kind":"instance","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instInhabitedGCongrKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L137-L137","name":"Mathlib.Tactic.GCongr.GCongrKey.varyingArgs","line":137,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.varyingArgs","doc":"The array of which arguments in the application of `head` are different.\nFor example, `a + b ≤ a + c` has `#[false, false, false, false, false, true]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.varyingArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrKey</span>.<span class=\"name\">varyingArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L134-L134","name":"Mathlib.Tactic.GCongr.GCongrKey.head","line":134,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.head","doc":"The name of the head function. For example, `a + b ≤ a + c` has ``head := `HAdd.hAdd``. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.head\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrKey</span>.<span class=\"name\">head</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L132-L132","name":"Mathlib.Tactic.GCongr.GCongrKey.relName","line":132,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.relName","doc":"The name of the relation. For example, `a + b ≤ a + c` has ``relName := `LE.le``. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.relName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrKey</span>.<span class=\"name\">relName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L130-L130","name":"Mathlib.Tactic.GCongr.GCongrKey.mk","line":130,"kind":"ctor","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrKey</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">relName </span><span class=\"fn\">head</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varyingArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GCongr/Core.lean#L129-L138","name":"Mathlib.Tactic.GCongr.GCongrKey","line":129,"kind":"structure","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey","doc":"`GCongrKey` is the key used to store and look up `gcongr` lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}