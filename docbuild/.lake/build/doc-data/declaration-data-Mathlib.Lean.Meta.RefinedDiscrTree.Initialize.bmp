{"name":"Mathlib.Lean.Meta.RefinedDiscrTree.Initialize","instances":[{"typeNames":["Lean.Meta.RefinedDiscrTree.PreDiscrTree"],"name":"Lean.Meta.RefinedDiscrTree.instInhabitedPreDiscrTree","className":"Inhabited"},{"typeNames":["Lean.Meta.RefinedDiscrTree.PreDiscrTree"],"name":"Lean.Meta.RefinedDiscrTree.PreDiscrTree.instAppend","className":"Append"},{"typeNames":["_private.Mathlib.Lean.Meta.RefinedDiscrTree.Initialize.0.Lean.Meta.RefinedDiscrTree.InitResults"],"name":"Lean.Meta.RefinedDiscrTree.InitResults.instAppendInitResults","className":"Append"}],"imports":["Init","Mathlib.Lean.Meta.RefinedDiscrTree.Basic","Lean.Meta.CompletionName"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L308-L315","name":"Lean.Meta.RefinedDiscrTree.createModuleTreeRef","line":308,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.createModuleTreeRef","doc":"Create a reference for a `RefinedDiscrTree` for current module declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.createModuleTreeRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">createModuleTreeRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span>))</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef\">ModuleDiscrTreeRef</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L294-L306","name":"Lean.Meta.RefinedDiscrTree.createModuleDiscrTree","line":294,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.createModuleDiscrTree","doc":"Create a `RefinedDiscrTree` for current module declarations, consisting of all\nentries generated by `act` from constants in the current file.\n(it gets called by `addConstToPreDiscrTree`)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.createModuleDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">createModuleDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span>))</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">RefinedDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L280-L280","name":"Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef.ref","line":280,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef.ref","doc":"The reference to the `RefinedDiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">ModuleDiscrTreeRef</span>.<span class=\"name\">ref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef\">ModuleDiscrTreeRef</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">RefinedDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L278-L278","name":"Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef.mk","line":278,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">ModuleDiscrTreeRef</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">RefinedDiscrTree</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef\">ModuleDiscrTreeRef</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L271-L280","name":"Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef","line":271,"kind":"structure","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef","doc":"A discriminator tree for the current module's declarations only.\n\nNote. We use different discrimination trees for imported and current module\ndeclarations since imported declarations are typically much more numerous but\nnot changed while the current module is edited.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">ModuleDiscrTreeRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L246-L264","name":"Lean.Meta.RefinedDiscrTree.createImportedDiscrTree.go","line":246,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.createImportedDiscrTree.go","doc":"Allocate constants to tasks according to `constantsPerTask`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.createImportedDiscrTree.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">createImportedDiscrTree</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span>))</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constantsPerTask </span><span class=\"fn\">capacityPerTask</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cctx</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tasks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Initialize.0.Lean.Meta.RefinedDiscrTree.InitResults\">Lean.Meta.RefinedDiscrTree.InitResults✝</a> <span class=\"fn\">α</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start </span><span class=\"fn\">cnt </span><span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Initialize.0.Lean.Meta.RefinedDiscrTree.InitResults\">Lean.Meta.RefinedDiscrTree.InitResults✝</a> <span class=\"fn\">α</span>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L233-L269","name":"Lean.Meta.RefinedDiscrTree.createImportedDiscrTree","line":233,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.createImportedDiscrTree","doc":"Create a `RefinedDiscrTree` consisting of all entries generated by `act`\nfrom imported constants. (it gets called by `addConstToPreDiscrTree`).\nThis uses parallel computation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.createImportedDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">createImportedDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span>))</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constantsPerTask </span><span class=\"fn\">capacityPerTask</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">RefinedDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L167-L168","name":"Lean.Meta.RefinedDiscrTree.InitResults.instAppendInitResults","line":167,"kind":"instance","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.InitResults.instAppendInitResults","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.InitResults.instAppendInitResults\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">InitResults</span>.<span class=\"name\">instAppendInitResults</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Initialize.0.Lean.Meta.RefinedDiscrTree.InitResults\">Lean.Meta.RefinedDiscrTree.InitResults✝</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L161-L165","name":"Lean.Meta.RefinedDiscrTree.InitResults.append","line":161,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.InitResults.append","doc":"Combine two initial results. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.InitResults.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">InitResults</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Initialize.0.Lean.Meta.RefinedDiscrTree.InitResults\">Lean.Meta.RefinedDiscrTree.InitResults✝</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Initialize.0.Lean.Meta.RefinedDiscrTree.InitResults\">Lean.Meta.RefinedDiscrTree.InitResults✝</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L103-L111","name":"Lean.Meta.RefinedDiscrTree.blacklistInsertion","line":103,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.blacklistInsertion","doc":"Return true if `declName` is automatically generated,\nor otherwise unsuitable as a lemma suggestion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.blacklistInsertion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">blacklistInsertion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L81-L82","name":"Lean.Meta.RefinedDiscrTree.PreDiscrTree.instAppend","line":81,"kind":"instance","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.instAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.instAppend\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">instAppend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L71-L79","name":"Lean.Meta.RefinedDiscrTree.PreDiscrTree.append","line":71,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.append","doc":"Merge two discrimination trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L66-L69","name":"Lean.Meta.RefinedDiscrTree.PreDiscrTree.toRefinedDiscrTree","line":66,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.toRefinedDiscrTree","doc":"Convert a pre-discrimination tree to a `RefinedDiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.toRefinedDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">toRefinedDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">RefinedDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L62-L64","name":"Lean.Meta.RefinedDiscrTree.PreDiscrTree.push","line":62,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.push","doc":"Add an entry to the pre-discrimination tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.push\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L48-L48","name":"Lean.Meta.RefinedDiscrTree.instInhabitedPreDiscrTree","line":48,"kind":"instance","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.instInhabitedPreDiscrTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.instInhabitedPreDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instInhabitedPreDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L47-L47","name":"Lean.Meta.RefinedDiscrTree.PreDiscrTree.tries","line":47,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.tries","doc":"Lazy entries for root of trie. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.tries\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">tries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L45-L45","name":"Lean.Meta.RefinedDiscrTree.PreDiscrTree.root","line":45,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.root","doc":"Maps keys to index in tries array. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.root\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">root</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L43-L43","name":"Lean.Meta.RefinedDiscrTree.PreDiscrTree.mk","line":43,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tries</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>))</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L39-L48","name":"Lean.Meta.RefinedDiscrTree.PreDiscrTree","line":39,"kind":"structure","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree","doc":"Structure for quickly initializing a lazy discrimination tree with a large number\nof elements using concurrent functions for generating entries.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.PreDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">PreDiscrTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.lean#L29-L37","name":"Lean.Meta.RefinedDiscrTree.insert","line":29,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.insert","doc":"Directly insert a `Key`, `LazyEntry` pair into a `RefinedDiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">key</span> : <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">RefinedDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"}]}