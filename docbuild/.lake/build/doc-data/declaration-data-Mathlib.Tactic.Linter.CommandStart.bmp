{"name":"Mathlib.Tactic.Linter.CommandStart","instances":[{"typeNames":["Mathlib.Linter.FormatError"],"name":"Mathlib.Linter.instInhabitedFormatError","className":"Inhabited"},{"typeNames":["Mathlib.Linter.FormatError"],"name":"Mathlib.Linter.instToStringFormatError","className":"ToString"}],"imports":["Init","Mathlib.Tactic.Linter.Header"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L296-L356","name":"Mathlib.Linter.Style.CommandStart.commandStartLinter","line":296,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.Style.CommandStart.commandStartLinter","doc":"The `commandStart` linter emits a warning if\n* either a command does not start at the beginning of a line;\n* or the \"hypotheses segment\" of a declaration does not coincide with its pretty-printed version.\n\nIn practice, this makes sure that the spacing in a typical declaration looks like\n```lean\nexample (a : Nat) {R : Type} [Add R] : <not linted part>\n```\nas opposed to\n```lean\nexample (a: Nat) {R:Type}  [Add  R] : <not linted part>\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.Style.CommandStart.commandStartLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">CommandStart</span>.<span class=\"name\">commandStartLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L279-L294","name":"Mathlib.Linter.Style.CommandStart.mkWindow","line":279,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.Style.CommandStart.mkWindow","doc":"`mkWindow orig start ctx` extracts from `orig` a string that starts at the first\nnon-whitespace character before `start`, then expands to cover `ctx` more characters\nand continues still until the first non-whitespace character.\n\nIn essence, it extracts the substring of `orig` that begins at `start`, continues for `ctx`\ncharacters plus expands left and right until it encounters the first whitespace character,\nto avoid cutting into \"words\".\n\n*Note*. `start` is the number of characters *from the right* where our focus is!\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.Style.CommandStart.mkWindow\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">CommandStart</span>.<span class=\"name\">mkWindow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">orig</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start </span><span class=\"fn\">ctx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L270-L277","name":"Mathlib.Linter.Style.CommandStart.isOutside","line":270,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.Style.CommandStart.isOutside","doc":"Given a `HashSet` of `String.Range`s `rgs` and a further `String.Range` `rg`,\n`isOutside rgs rg` returns `false` if and only if `rgs` contains a range that completely contains\n`rg`.\n\nThe linter uses this to figure out which nodes should be ignored.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.Style.CommandStart.isOutside\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">CommandStart</span>.<span class=\"name\">isOutside</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rgs</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rg</span> : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L247-L268","name":"Mathlib.Linter.Style.CommandStart.getUnlintedRanges","line":247,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.Style.CommandStart.getUnlintedRanges","doc":"Given an array `a` of `SyntaxNodeKind`s, we accumulate the ranges of the syntax nodes of the\ninput syntax whose kind is in `a`.\n\nThe linter uses this information to avoid emitting a warning for nodes with kind contained in\n`unlintedNodes`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.Style.CommandStart.getUnlintedRanges\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">CommandStart</span>.<span class=\"name\">getUnlintedRanges</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L198-L245","name":"Mathlib.Linter.Style.CommandStart.unlintedNodes","line":198,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.Style.CommandStart.unlintedNodes","doc":"`unlintedNodes` contains the `SyntaxNodeKind`s for which there is no clear formatting preference:\nif they appear in surface syntax, the linter will ignore formatting.\n\nCurrently, the unlined nodes are mostly related to `Subtype`, `Set` and `Finset` notation and\nlist notation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.Style.CommandStart.unlintedNodes\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">CommandStart</span>.<span class=\"name\">unlintedNodes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L192-L194","name":"Mathlib.Linter.parallelScan","line":192,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.parallelScan","doc":"Scan the two input strings `L` and `M`, assuming `M` is the pretty-printed version of `L`.\nThis almost means that `L` and `M` only differ in whitespace.\n\nWhile scanning the two strings, accumulate any discrepancies --- with some heuristics to avoid\nflagging some line-breaking changes.\n(The pretty-printer does not always produce desirably formatted code.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.parallelScan\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">parallelScan</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src </span><span class=\"fn\">fmt</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L132-L190","name":"Mathlib.Linter.parallelScanAux","line":132,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.parallelScanAux","doc":"Scan the two input strings `L` and `M`, assuming `M` is the pretty-printed version of `L`.\nThis almost means that `L` and `M` only differ in whitespace.\n\nWhile scanning the two strings, accumulate any discrepancies --- with some heuristics to avoid\nflagging some line-breaking changes.\n(The pretty-printer does not always produce desirably formatted code.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.parallelScanAux\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">parallelScanAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L </span><span class=\"fn\">M</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L119-L130","name":"Mathlib.Linter.pushFormatError","line":119,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.pushFormatError","doc":"Add a new `FormatError` `f` to the array `fs`, trying, as much as possible, to merge the new\n`FormatError` with the last entry of `fs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.pushFormatError\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">pushFormatError</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L101-L117","name":"Mathlib.Linter.mkFormatError","line":101,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.mkFormatError","doc":"Produces a `FormatError` from the input data.  It expects\n* `ls` to be a \"user-typed\" string;\n* `ms` to be a \"pretty-printed\" string;\n* `msg` to be a custom error message, such as `extra space` or `remove line break`;\n* `length` (optional with default `1`), how many characters the error spans.\n\nIn particular, it extracts the position information within the string, both as number of characters\nand as `String.Pos`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.mkFormatError\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">mkFormatError</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ls </span><span class=\"fn\">ms </span><span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">length</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L96-L99","name":"Mathlib.Linter.instToStringFormatError","line":96,"kind":"instance","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.instToStringFormatError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.instToStringFormatError\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">instToStringFormatError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L94-L94","name":"Mathlib.Linter.instInhabitedFormatError","line":94,"kind":"instance","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.instInhabitedFormatError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.instInhabitedFormatError\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">instInhabitedFormatError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L93-L93","name":"Mathlib.Linter.FormatError.srcStartPos","line":93,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.srcStartPos","doc":"The starting position of the mismatch, as a `String.pos`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.srcStartPos\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">FormatError</span>.<span class=\"name\">srcStartPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L91-L91","name":"Mathlib.Linter.FormatError.length","line":91,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.length","doc":"The length of the mismatch, as number of characters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.length\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">FormatError</span>.<span class=\"name\">length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L89-L89","name":"Mathlib.Linter.FormatError.msg","line":89,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.msg","doc":"The kind of formatting error. For example: `extra space`, `remove line break` or\n`missing space`.\n\nStrings starting with `Oh no` indicate an internal error.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.msg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">FormatError</span>.<span class=\"name\">msg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L83-L83","name":"Mathlib.Linter.FormatError.fmtPos","line":83,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.fmtPos","doc":"The distance to the end of the formatted string, as number of characters "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.fmtPos\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">FormatError</span>.<span class=\"name\">fmtPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L81-L81","name":"Mathlib.Linter.FormatError.srcEndPos","line":81,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.srcEndPos","doc":"The distance to the end of the source string, as number of string positions "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.srcEndPos\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">FormatError</span>.<span class=\"name\">srcEndPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L79-L79","name":"Mathlib.Linter.FormatError.srcNat","line":79,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.srcNat","doc":"The distance to the end of the source string, as number of characters "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.srcNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">FormatError</span>.<span class=\"name\">srcNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L77-L77","name":"Mathlib.Linter.FormatError.mk","line":77,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">FormatError</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">srcNat</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">srcEndPos</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fmtPos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">length</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">srcStartPos</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\">FormatError</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L69-L94","name":"Mathlib.Linter.FormatError","line":69,"kind":"structure","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError","doc":"A `FormatError` is the main structure tracking how some surface syntax differs from its\npretty-printed version.\n\nIn case of deviations, it contains the deviation's location within an ambient string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.FormatError\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">FormatError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L47-L67","name":"Mathlib.Linter.CommandStart.endPos","line":47,"kind":"def","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.CommandStart.endPos","doc":"`CommandStart.endPos stx` returns the position up until the `commandStart` linter checks the\nformatting.\nThis is every declaration until the type-specification, if there is one, or the value,\nas well as all `variable` commands.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.CommandStart.endPos\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">CommandStart</span>.<span class=\"name\">endPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L40-L45","name":"Mathlib.Linter.linter.style.commandStart.verbose","line":40,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.linter.style.commandStart.verbose","doc":"If the `linter.style.commandStart.verbose` option is `true`, the `commandStart` linter\nreports some helpful diagnostic information. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.linter.style.commandStart.verbose\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">commandStart</span>.<span class=\"name\">verbose</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/CommandStart.lean#L21-L38","name":"Mathlib.Linter.linter.style.commandStart","line":21,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.linter.style.commandStart","doc":"The `commandStart` linter emits a warning if\n* either a command does not start at the beginning of a line;\n* or the \"hypotheses segment\" of a declaration does not coincide with its pretty-printed version.\n\nIn practice, this makes sure that the spacing in a typical declaration looks like\n```lean\nexample (a : Nat) {R : Type} [Add R] : <not linted part>\n```\nas opposed to\n```lean\nexample (a: Nat) {R:Type}  [Add  R] : <not linted part>\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/CommandStart.html#Mathlib.Linter.linter.style.commandStart\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">commandStart</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}