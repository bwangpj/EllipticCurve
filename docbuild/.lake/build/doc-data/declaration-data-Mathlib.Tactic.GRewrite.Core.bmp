{"name":"Mathlib.Tactic.GRewrite.Core","instances":[],"imports":["Init","Mathlib.Tactic.GCongr.Core"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L56-L133","name":"Lean.MVarId.grewrite","line":56,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Lean.MVarId.grewrite","doc":"Rewrite `e` using the relation `hrel : x ~ y`, and construct an implication proof\nusing the `gcongr` tactic to discharge this goal.\n\nif `forwardImp = true`, we prove that `e → eNew`; otherwise `eNew → e`.\n\nIf `symm = false`, we rewrite `e` to `eNew := e[x/y]`; otherwise `eNew := e[y/x]`.\n\nThe code aligns with `Lean.MVarId.rewrite` as much as possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Lean.MVarId.grewrite\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">grewrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">hrel</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forwardImp </span><span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\">Mathlib.Tactic.GRewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult\">Mathlib.Tactic.GRewriteResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L54-L54","name":"Mathlib.Tactic.GRewrite.Config.implicationHyp","line":54,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config.implicationHyp","doc":"When `implicationHyp = true`, interpret the rewrite rule as an implication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config.implicationHyp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GRewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">implicationHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L52-L52","name":"Mathlib.Tactic.GRewrite.Config.useRewrite","line":52,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config.useRewrite","doc":"When `useRewrite = true`, switch to using the default `rewrite` tactic when the goal is\nand equality or iff. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config.useRewrite\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GRewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">useRewrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L49-L49","name":"Mathlib.Tactic.GRewrite.Config.mk","line":49,"kind":"ctor","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GRewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toConfig</span> : <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useRewrite </span><span class=\"fn\">implicationHyp</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L49-L54","name":"Mathlib.Tactic.GRewrite.Config.toConfig","line":49,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config.toConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config.toConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GRewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">toConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L48-L54","name":"Mathlib.Tactic.GRewrite.Config","line":48,"kind":"structure","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config","doc":"Configures the behavior of the `rewrite` and `rw` tactics. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GRewrite</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L46-L46","name":"Mathlib.Tactic.GRewriteResult.mvarIds","line":46,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult.mvarIds","doc":"The new side goals "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult.mvarIds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GRewriteResult</span>.<span class=\"name\">mvarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult\">GRewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L44-L44","name":"Mathlib.Tactic.GRewriteResult.impProof","line":44,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult.impProof","doc":"The proof of the implication. The direction depends on the argument `forwardImp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult.impProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GRewriteResult</span>.<span class=\"name\">impProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult\">GRewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L42-L42","name":"Mathlib.Tactic.GRewriteResult.eNew","line":42,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult.eNew","doc":"The rewritten expression "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult.eNew\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GRewriteResult</span>.<span class=\"name\">eNew</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult\">GRewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L40-L40","name":"Mathlib.Tactic.GRewriteResult.mk","line":40,"kind":"ctor","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GRewriteResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eNew </span><span class=\"fn\">impProof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult\">GRewriteResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L39-L46","name":"Mathlib.Tactic.GRewriteResult","line":39,"kind":"structure","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult","doc":"The result returned by `Lean.MVarId.grewrite`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewriteResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GRewriteResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/GRewrite/Core.lean#L31-L37","name":"Mathlib.Tactic.GRewrite.dischargeMain","line":31,"kind":"def","docLink":"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.dischargeMain","doc":"Given a proof of `a ~ b`, close a goal of the form `a ~' b` or `b ~' a`\nfor some possibly different relation `~'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.dischargeMain\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GRewrite</span>.<span class=\"name\">dischargeMain</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hrel</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}