{"name":"Mathlib.Tactic.Linter.Style","instances":[],"imports":["Init","Lean.Elab.Command","Lean.Server.InfoUtils","Mathlib.Tactic.Linter.Header","Mathlib.Tactic.DeclarationNames"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L556-L579","name":"Mathlib.Linter.Style.show.showLinter","line":556,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.show.showLinter","doc":"The \"show\" linter emits a warning if the `show` tactic changed the goal. `show` should only be used\nto indicate intermediate goal states for proof readability. When the goal is actually changed,\n`change` should be preferred.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.show.showLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">show</span>.<span class=\"name\">showLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L544-L552","name":"Mathlib.Linter.linter.style.show","line":544,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.show","doc":"The \"show\" linter emits a warning if the `show` tactic changed the goal. `show` should only be used\nto indicate intermediate goal states for proof readability. When the goal is actually changed,\n`change` should be preferred.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.show\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">show</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L523-L536","name":"Mathlib.Linter.Style.openClassical.openClassicalLinter","line":523,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.openClassical.openClassicalLinter","doc":"The \"openClassical\" linter emits a warning on `open Classical` statements which are not\nscoped to a single declaration. A non-scoped `open Classical` can hide that some theorem statements\nwould be better stated with explicit decidability statements.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.openClassical.openClassicalLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">openClassical</span>.<span class=\"name\">openClassicalLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L505-L521","name":"Mathlib.Linter.Style.openClassical.extractOpenNames","line":505,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.openClassical.extractOpenNames","doc":"If `stx` is syntax describing an `open` command, `extractOpenNames stx`\nreturns an array of the syntax corresponding to the opened names,\nomitting any renamed or hidden items.\n\nThis only checks independent `open` commands: for `open ... in ...` commands,\nthis linter returns an empty array.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.openClassical.extractOpenNames\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">openClassical</span>.<span class=\"name\">extractOpenNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`ident</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L494-L501","name":"Mathlib.Linter.linter.style.openClassical","line":494,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.openClassical","doc":"The \"openClassical\" linter emits a warning on `open Classical` statements which are not\nscoped to a single declaration. A non-scoped `open Classical` can hide that some theorem statements\nwould be better stated with explicit decidability statements.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.openClassical\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">openClassical</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L468-L486","name":"Mathlib.Linter.Style.nameCheck.doubleUnderscore","line":468,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.nameCheck.doubleUnderscore","doc":"The `nameCheck` linter emits a warning on declarations whose name is non-standard style.\n(Currently, this only includes declarations whose name includes a double underscore.)\n\n**Why is this bad?** Double underscores in theorem names can be considered non-standard style and\nprobably have been introduced by accident.\n**How to fix this?** Use single underscores to separate parts of a name, following standard naming\nconventions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.nameCheck.doubleUnderscore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">nameCheck</span>.<span class=\"name\">doubleUnderscore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L453-L464","name":"Mathlib.Linter.linter.style.nameCheck","line":453,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.nameCheck","doc":"The `nameCheck` linter emits a warning on declarations whose name is non-standard style.\n(Currently, this only includes declarations whose name includes a double underscore.)\n\n**Why is this bad?** Double underscores in theorem names can be considered non-standard style and\nprobably have been introduced by accident.\n**How to fix this?** Use single underscores to separate parts of a name, following standard naming\nconventions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.nameCheck\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">nameCheck</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L417-L448","name":"Mathlib.Linter.Style.longLine.longLineLinter","line":417,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longLine.longLineLinter","doc":"The \"longLine\" linter emits a warning on lines longer than 100 characters.\nWe allow lines containing URLs to be longer, though. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longLine.longLineLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">longLine</span>.<span class=\"name\">longLineLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L408-L413","name":"Mathlib.Linter.linter.style.longLine","line":408,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longLine","doc":"The \"longLine\" linter emits a warning on lines longer than 100 characters.\nWe allow lines containing URLs to be longer, though. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longLine\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">longLine</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L346-L400","name":"Mathlib.Linter.Style.longFile.longFileLinter","line":346,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longFile.longFileLinter","doc":"The \"longFile\" linter emits a warning on files which are longer than a certain number of lines\n(`linter.style.longFileDefValue` by default on mathlib, no limit for downstream projects).\nIf this option is set to `N` lines, the linter warns once a file has more than `N` lines.\nA value of `0` silences the linter entirely.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longFile.longFileLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">longFile</span>.<span class=\"name\">longFileLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L338-L342","name":"Mathlib.Linter.linter.style.longFileDefValue","line":338,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFileDefValue","doc":"The number of lines that the `longFile` linter considers the default. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFileDefValue\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">longFileDefValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L327-L336","name":"Mathlib.Linter.linter.style.longFile","line":327,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFile","doc":"The \"longFile\" linter emits a warning on files which are longer than a certain number of lines\n(`linter.style.longFileDefValue` by default on mathlib, no limit for downstream projects).\nIf this option is set to `N` lines, the linter warns once a file has more than `N` lines.\nA value of `0` silences the linter entirely.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFile\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">longFile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L304-L314","name":"Mathlib.Linter.Style.lambdaSyntax.lambdaSyntaxLinter","line":304,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.lambdaSyntaxLinter","doc":"The `lambdaSyntax` linter flags uses of the symbol `Î»` to define anonymous functions.\nThis is syntactically equivalent to the `fun` keyword; mathlib style prefers using the latter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.lambdaSyntaxLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">lambdaSyntax</span>.<span class=\"name\">lambdaSyntaxLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L293-L302","name":"Mathlib.Linter.Style.lambdaSyntax.findLambdaSyntax","line":293,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.findLambdaSyntax","doc":"`findLambdaSyntax stx` extracts from `stx` all syntax nodes of `kind` `Term.fun`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.findLambdaSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">lambdaSyntax</span>.<span class=\"name\">findLambdaSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L282-L289","name":"Mathlib.Linter.linter.style.lambdaSyntax","line":282,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.lambdaSyntax","doc":"The `lambdaSyntax` linter flags uses of the symbol `Î»` to define anonymous functions.\nThis is syntactically equivalent to the `fun` keyword; mathlib style prefers using the latter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.lambdaSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">lambdaSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L260-L268","name":"Mathlib.Linter.Style.dollarSyntax.dollarSyntaxLinter","line":260,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.dollarSyntaxLinter","doc":"The `dollarSyntax` linter flags uses of `<|` that are achieved by typing `$`.\nThese are disallowed by the mathlib style guide, as using `<|` pairs better with `|>`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.dollarSyntaxLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">dollarSyntax</span>.<span class=\"name\">dollarSyntaxLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L250-L258","name":"Mathlib.Linter.Style.dollarSyntax.findDollarSyntax","line":250,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.findDollarSyntax","doc":"`findDollarSyntax stx` extracts from `stx` the syntax nodes of `kind` `$`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.findDollarSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">dollarSyntax</span>.<span class=\"name\">findDollarSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L241-L246","name":"Mathlib.Linter.linter.style.dollarSyntax","line":241,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.dollarSyntax","doc":"The `dollarSyntax` linter flags uses of `<|` that are achieved by typing `$`.\nThese are disallowed by the mathlib style guide, as using `<|` pairs better with `|>`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.dollarSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">dollarSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L212-L228","name":"Mathlib.Linter.Style.cdotLinter","line":212,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.cdotLinter","doc":"The `cdot` linter flags uses of the \"cdot\" `Â·` that are achieved by typing a character\ndifferent from `Â·`.\nFor instance, a \"plain\" dot `.` is allowed syntax, but is flagged by the linter.\nIt also flags \"isolated cdots\", i.e. when the `Â·` is on its own line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.cdotLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">cdotLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L203-L208","name":"Mathlib.Linter.unwanted_cdot","line":203,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.unwanted_cdot","doc":"`unwanted_cdot stx` returns an array of syntax atoms within `stx`\ncorresponding to `cdot`s that are not written with the character `Â·`.\nThis is precisely what the `cdot` linter flags.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.unwanted_cdot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">unwanted_cdot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L191-L201","name":"Mathlib.Linter.findCDot","line":191,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.findCDot","doc":"`findCDot stx` extracts from `stx` the syntax nodes of `kind` `Lean.Parser.Term.cdot` or `cdotTk`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.findCDot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">findCDot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L184-L189","name":"Mathlib.Linter.isCDot?","line":184,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.isCDot?","doc":"`isCDot? stx` checks whether `stx` is a `Syntax` node corresponding to a `cdot` typed with\nthe character `Â·`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.isCDot?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">isCDot?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L174-L182","name":"Mathlib.Linter.linter.style.cdot","line":174,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.cdot","doc":"The `cdot` linter flags uses of the \"cdot\" `Â·` that are achieved by typing a character\ndifferent from `Â·`.\nFor instance, a \"plain\" dot `.` is allowed syntax, but is flagged by the linter.\nIt also flags \"isolated cdots\", i.e. when the `Â·` is on its own line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.cdot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">cdot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L141-L159","name":"Mathlib.Linter.Style.missingEnd.missingEndLinter","line":141,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.missingEnd.missingEndLinter","doc":"The \"missing end\" linter emits a warning on non-closed `section`s and `namespace`s.\nIt allows the \"outermost\" `noncomputable section` to be left open (whether or not it is named).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.missingEnd.missingEndLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">missingEnd</span>.<span class=\"name\">missingEndLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L131-L137","name":"Mathlib.Linter.linter.style.missingEnd","line":131,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.missingEnd","doc":"The \"missing end\" linter emits a warning on non-closed `section`s and `namespace`s.\nIt allows the \"outermost\" `noncomputable section` to be left open (whether or not it is named).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.missingEnd\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">missingEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L80-L116","name":"Mathlib.Linter.Style.setOption.setOptionLinter","line":80,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.setOptionLinter","doc":"The `setOption` linter: this lints any `set_option` command, term or tactic\nwhich sets a `debug`, `pp`, `profiler` or `trace` option.\nThis also warns if an option containing `maxHeartbeats` (typically, the `maxHeartbeats` or\n`synthInstance.maxHeartbeats` option) is set.\n\n**Why is this bad?** The `debug`, `pp`, `profiler` and `trace` options are good for debugging,\nbut should not be used in production code.\n\n`maxHeartbeats` options should be scoped as `set_option opt in ...` (and be followed by a comment\nexplaining the need for them; another linter enforces this).\n\n**How to fix this?** The `maxHeartbeats` options can be scoped to individual commands, if they\nare truly necessary.\n\nThe `debug`, `pp`, `profiler` and `trace` are usually not necessary for production code,\nso you can simply remove them. (Some tests will intentionally use one of these options;\nin this case, simply allow the linter.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.setOptionLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">setOption</span>.<span class=\"name\">setOptionLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L76-L78","name":"Mathlib.Linter.Style.setOption.is_set_option","line":76,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.is_set_option","doc":"Deprecated alias for `Mathlib.Linter.Style.setOption.isSetOption`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.is_set_option\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">setOption</span>.<span class=\"name\">is_set_option</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L72-L74","name":"Mathlib.Linter.Style.setOption.isSetOption","line":72,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.isSetOption","doc":"Whether a given piece of syntax is a `set_option` command, tactic or term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.isSetOption\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">setOption</span>.<span class=\"name\">isSetOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L68-L70","name":"Mathlib.Linter.Style.setOption.parse_set_option","line":68,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.parse_set_option","doc":"Deprecated alias for `Mathlib.Linter.Style.setOption.parseSetOption`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.parse_set_option\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">setOption</span>.<span class=\"name\">parse_set_option</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L59-L66","name":"Mathlib.Linter.Style.setOption.parseSetOption","line":59,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.parseSetOption","doc":"Whether a syntax element is a `set_option` command, tactic or term:\nReturn the name of the option being set, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.parseSetOption\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">setOption</span>.<span class=\"name\">parseSetOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/80ef7ee04d6e4d69bb5ec32dc5fc93ed19cd1fbc/Mathlib/Tactic/Linter/Style.lean#L48-L55","name":"Mathlib.Linter.linter.style.setOption","line":48,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.setOption","doc":"The `setOption` linter emits a warning on a `set_option` command, term or tactic\nwhich sets a `pp`, `profiler` or `trace` option.\nIt also warns on an option containing `maxHeartbeats`\n(as these should be scoped as `set_option ... in` instead). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.setOption\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">setOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}